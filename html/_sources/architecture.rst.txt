架构设计
========

LiberZMQ采用领域驱动设计（DDD）思想，将消息队列领域的核心概念映射到代码结构中，提供高性能、易用且可扩展的消息传递解决方案。

设计理念
--------

**简洁易用**
  提供简洁的API设计，降低开发者的学习成本和使用难度，让复杂的ZeroMQ操作变得简单直观。

**高性能**
  基于ZeroMQ的高性能异步消息传递，充分利用ZeroMQ的零拷贝、无锁队列等特性。

**可扩展性**
  支持自定义序列化器、扩展接口和插件机制，满足不同场景的需求。

**可靠性**
  完善的异常处理、重试机制和数据校验，确保消息传递的可靠性和数据完整性。

核心架构
--------

.. code-block:: text

    ┌─────────────────────────────────────────────────────────────┐
    │                    应用层 (Application)                     │
    │  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────┐ │
    │  │   Pub/Sub   │ │   Req/Rep   │ │ Push/Pull   │ │ Dealer/ │ │
    │  │   Pattern   │ │   Pattern   │ │   Pattern   │ │ Router  │ │
    │  └─────────────┘ └─────────────┘ └─────────────┘ └─────────┘ │
    └─────────────────────────────────────────────────────────────┘
    ┌─────────────────────────────────────────────────────────────┐
    │                    核心层 (Core)                           │
    │  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────┐ │
    │  │ BaseZMQNode │ │ Serializers │ │   Config    │ │ Logging │ │
    │  └─────────────┘ └─────────────┘ └─────────────┘ └─────────┘ │
    └─────────────────────────────────────────────────────────────┘
    ┌─────────────────────────────────────────────────────────────┐
    │                   基础层 (Infrastructure)                   │
    │  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────┐ │
    │  │   PyZMQ     │ │ Threading   │ │ Exception   │ │ Metrics │ │
    │  └─────────────┘ └─────────────┘ └─────────────┘ └─────────┘ │
    └─────────────────────────────────────────────────────────────┘

模块设计
--------

核心模块 (liberzmq.core)
~~~~~~~~~~~~~~~~~~~~~~~~~

**BaseZMQNode**
  所有ZeroMQ节点的基类，提供连接管理、配置处理、日志记录等基础功能。

**Config**
  配置管理模块，支持文件配置和环境变量配置，提供灵活的配置机制。

消息模式 (liberzmq.patterns)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**发布-订阅模式 (Pub/Sub)**
  - Publisher: 消息发布者，支持主题分类和消息广播
  - Subscriber: 消息订阅者，支持主题过滤和回调处理

**请求-响应模式 (Req/Rep)**
  - Server: 服务器端，支持请求处理器注册和同步响应
  - Client: 客户端，支持同步请求和远程方法调用

**推拉模式 (Push/Pull)**
  - Pusher: 任务推送器，支持负载均衡的任务分发
  - Puller: 任务拉取器，支持任务处理器注册和工作器模式

**Dealer/Router模式**
  - Dealer: 异步客户端，支持并发请求和回调处理
  - Router: 路由服务器，支持客户端识别和消息路由

序列化器 (liberzmq.serializers)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**支持的序列化格式**
  - JSON: 人类可读，调试友好
  - Protocol Buffers: 高性能，跨语言支持
  - 二进制: 最高性能，适用于简单数据
  - MessagePack: 紧凑高效，介于JSON和二进制之间

**扩展机制**
  支持自定义序列化器，只需实现BaseSerializer接口。

异常处理 (liberzmq.exceptions)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**异常层次结构**
  - LiberZMQError: 基础异常类
    - ConnectionError: 连接相关异常
    - TimeoutError: 超时异常
    - SerializationError: 序列化异常
    - ValidationError: 数据校验异常

日志系统 (liberzmq.logging)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**功能特性**
  - 支持多种日志级别和输出目标
  - 性能指标记录和监控
  - 结构化日志输出
  - 可配置的日志格式

设计模式应用
------------

**工厂模式**
  序列化器工厂，根据配置动态创建不同类型的序列化器。

**策略模式**
  序列化策略，支持运行时切换不同的序列化算法。

**观察者模式**
  发布-订阅模式的实现，支持事件驱动的消息处理。

**模板方法模式**
  BaseZMQNode定义了节点生命周期的模板，子类实现具体的连接和消息处理逻辑。

**装饰器模式**
  异常处理装饰器，为方法添加统一的异常处理逻辑。

性能优化
--------

**零拷贝传输**
  充分利用ZeroMQ的零拷贝特性，减少内存拷贝开销。

**连接池管理**
  智能的连接管理，避免频繁的连接建立和断开。

**异步处理**
  支持异步消息处理，提高并发性能。

**内存优化**
  合理的对象生命周期管理，避免内存泄漏。

扩展性设计
----------

**插件机制**
  支持第三方插件扩展，可以添加新的消息模式或功能。

**中间件支持**
  支持消息中间件，可以在消息发送和接收过程中添加自定义逻辑。

**监控集成**
  提供监控接口，可以集成Prometheus、Grafana等监控系统。

**配置热更新**
  支持配置的热更新，无需重启应用即可应用新配置。

安全考虑
--------

**数据校验**
  支持Cerberus、Pydantic等数据校验工具，确保数据完整性。

**加密传输**
  支持ZeroMQ的加密机制，保护数据传输安全。

**访问控制**
  支持基于身份的访问控制，限制客户端访问权限。

**审计日志**
  记录详细的操作日志，支持安全审计和问题追踪。